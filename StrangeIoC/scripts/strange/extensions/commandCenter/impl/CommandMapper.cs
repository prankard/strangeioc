//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using strange.extensions.commandCenter.api;
using strange.extensions.commandCenter.dsl;


namespace strange.extensions.commandCenter.impl
{
	public class CommandMapper : ICommandConfigurator
	{
		/*============================================================================*/
		/* Private Properties                                                         */
		/*============================================================================*/
		 
		private ICommandMappingList _mappings;
		
		private ICommandMapping _mapping;

		/*============================================================================*/
		/* Constructor                                                                */
		/*============================================================================*/
		
		/**
		 * Creates a Command Mapper
		 * @param mappings The command mapping list to add mappings to
		 */
		public CommandMapper(ICommandMappingList mappings)
		{
			_mappings = mappings;
		}
		
		/*============================================================================*/
		/* Public Functions                                                           */
		/*============================================================================*/
		
		/**
		 * @inheritDoc
		 */
		public ICommandConfigurator ToCommand(Type commandClass)
		{
			_mapping = new CommandMapping(commandClass);
			_mappings.AddMapping(_mapping);
			return this;
		}
		
		/**
		 * @inheritDoc
		 */
		public void FromCommand(Type commandClass)
		{
			_mappings.RemoveMappingFor(commandClass);
		}
		
		/**
		 * @inheritDoc
		 */
		public void FromAll()
		{
			_mappings.RemoveAllMappings();
		}
		
		/**
		 * @inheritDoc
		 */
		public ICommandConfigurator Once(bool value)
		{
			_mapping.SetFireOnce(value);
			return this;
		}
		
		/**
		 * @inheritDoc
		 */
		public ICommandConfigurator WithGuards(params object[] guards)
		{
			_mapping.AddGuards(guards);
			return this;
		}
		
		/**
		 * @inheritDoc
		 */
		public ICommandConfigurator WithHooks(params object[] hooks)
		{
			_mapping.AddHooks(hooks);
			return this;
		}
		
		/**
		 * @inheritDoc
		 */
		public ICommandConfigurator WithExecuteMethod(string name)
		{
			_mapping.SetExecuteMethod(name);
			return this;
		}
		
		/**
		 * @inheritDoc
		 */
		public ICommandConfigurator WithPayloadInjection(bool value)
		{
			_mapping.SetPayloadInjectionEnabled(value);
			return this;
		}
	}
}


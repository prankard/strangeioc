//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using strange.extensions.matching;
using System.Collections.Generic;
using System;
using strange.extensions.mediatorMap.api;
using strange.extensions.mediatorMap.dsl;

namespace strange.extensions.mediatorMap.impl
{
	public class MediatorMapper : IMediatorMapper, IMediatorUnmapper
	{
		/*============================================================================*/
		/* Private Properties                                                         */
		/*============================================================================*/
		
		private Dictionary<Type, IMediatorMapping> _mappings = new Dictionary<Type, IMediatorMapping>();
		
		private ITypeFilter _typeFilter;
		
		private MediatorViewHandler _handler;
		
//		private ILogger _logger;

		/*============================================================================*/
		/* Constructor                                                                */
		/*============================================================================*/

		public MediatorMapper (ITypeFilter typeFilter, MediatorViewHandler handler/*, ILogger logger = null*/)
		{
			_typeFilter = typeFilter;
			_handler = handler;
//			_logger = logger;
		}

		/*============================================================================*/
		/* Public Functions                                                           */
		/*============================================================================*/
		
		public IMediatorConfigurator ToMediator(Type mediatorType)
		{
			if (_mappings.ContainsKey (mediatorType))
				return OverwriteMapping(_mappings[mediatorType]);
			return CreateMapping(mediatorType);
		}
		
		public void FromMediator(Type mediatorType)
		{
			if (_mappings.ContainsKey(mediatorType))
				DeleteMapping(_mappings[mediatorType]);
		}
		 
		public void FromAll()
		{
			foreach (IMediatorMapping mapping in _mappings.Values)
			{
				DeleteMapping(mapping);
			}
		}

		/*============================================================================*/
		/* Private Functions                                                          */
		/*============================================================================*/

		private MediatorMapping CreateMapping(Type mediatorType)
		{
			MediatorMapping mapping = new MediatorMapping (_typeFilter, mediatorType);
			_handler.AddMapping (mapping);
			_mappings [mediatorType] = mapping;
			return mapping;
		}
		
		private void DeleteMapping(IMediatorMapping mapping)
		{
			_handler.RemoveMapping (mapping);
			_mappings.Remove (mapping.MediatorType);
		}

		private IMediatorConfigurator OverwriteMapping(IMediatorMapping mapping)
		{
			UnityEngine.Debug.Log ("Already mapped to " + _typeFilter.ToString () + ". Overwritting old mapping");
			DeleteMapping (mapping);
			return CreateMapping(mapping.MediatorType);
		}
	}
}


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using strange.extensions.injector.api;
using strange.extensions.mediatorMap.api;
using System.Collections.Generic;
using strange.extensions.matching;
using strange.framework.context.impl;

namespace strange.extensions.mediatorMap.impl
{
	public class MediatorFactory
	{
		/*============================================================================*/
		/* Private Properties                                                         */
		/*============================================================================*/

		/// <summary>
		/// A key dictory of mediators. 
		/// _mediators[view][mapping] = mediator;
		/// </summary>
		private Dictionary<object, Dictionary<IMediatorMapping, object>> _mediators = new Dictionary<object, Dictionary<IMediatorMapping, object>>();
		
		private IInjectionBinder _injector;
		
		private MediatorManager _manager;

		/*============================================================================*/
		/* Constructor                                                                */
		/*============================================================================*/

		public MediatorFactory (IInjectionBinder injector, MediatorManager manager)
		{
			_injector = injector;
			_manager = manager != null ? manager : new MediatorManager(this);
		}
		
		/*============================================================================*/
		/* Public Functions                                                           */
		/*============================================================================*/

		public object GetMediator(object item, IMediatorMapping mapping)
		{
			if (_mediators.ContainsKey(item) && _mediators[item].ContainsKey(mapping))
				return _mediators[item][mapping];
			return null;
		}

		public List<object> CreateMediators(object item, Type type, List<IMediatorMapping> mappings)
		{
			List<object> createdMediators = new List<object>();
			object mediator;
			foreach (IMediatorMapping mapping in mappings)
			{
				mediator = GetMediator(item, mapping);

				if (mediator == null)
				{
					MapTypeForFilterBinding(mapping.Matcher, type, item);
					mediator = CreateMediator(item, mapping);
					UnmapTypeForFilterBinding(mapping.Matcher, type, item);
				}

				if (mediator != null)
					createdMediators.Add(mediator);
			}

			return createdMediators;
		}

		public void RemoveMediators(object item)
		{
			if (!_mediators.ContainsKey(item))
				return;

			Dictionary<IMediatorMapping, object> mediators = _mediators[item];
			foreach (IMediatorMapping mapping in mediators.Keys)
			{
				_manager.RemoveMediator(mediators[mapping], item, mapping);
			}

			_mediators.Remove(item);
		}

		public void RemoveAllMediators()
		{
			foreach (object item in _mediators.Keys)
			{
				RemoveMediators(item);
			}
		}

		/*============================================================================*/
		/* Private Functions                                                          */
		/*============================================================================*/
		
		private object CreateMediator(object item, IMediatorMapping mapping)
		{
			object mediator = GetMediator(item, mapping);

			if (mediator != null)
				return mediator;
			
			if (mapping.Guards.Count == 0 || Guards.Approve(mapping.Guards.ToArray(), _injector))
			{
				mediator = _injector.InstantiateUnmapped(mapping.MediatorType);
				if (mapping.Hooks.Count > 0)
				{
					_injector.Bind(mapping.MediatorType).ToValue(mediator);
					Hooks.Apply(mapping.Hooks.ToArray(), _injector);
					_injector.Unbind(mapping.MediatorType);
				}
				AddMediator(mediator, item, mapping);
			}
			return mediator;
		}
		
		private void AddMediator(object mediator, object item, IMediatorMapping mapping)
		{
			if (!_mediators.ContainsKey(item))
				_mediators[item] = new Dictionary<IMediatorMapping, object>();
			_mediators[item][mapping] = mediator;
			_manager.AddMediator(mediator, item, mapping);
		}
		
		private void MapTypeForFilterBinding(ITypeFilter filter, Type type, object item)
		{
			foreach (Type requiredType in RequiredTypesFor(filter, type))
			{
				_injector.Bind(requiredType).ToValue(item);
			}
		}
		
		private void UnmapTypeForFilterBinding(ITypeFilter filter, Type type, object item)
		{
			
			foreach (Type requiredType in RequiredTypesFor(filter, type))
			{
//				if (_injector.satisfiesDirectly(requiredType))
				_injector.Unbind(requiredType);
			}
		}
		
		private List<Type> RequiredTypesFor(ITypeFilter filter, Type type)
		{
			List<Type> requiredTypes = new List<Type>(filter.AllOfTypes);

			if (!requiredTypes.Contains(type))
				requiredTypes.Add(type);
			
			return requiredTypes;
		}
	}
}


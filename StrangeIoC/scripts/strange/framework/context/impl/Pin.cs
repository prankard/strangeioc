//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace strange.framework.context.impl
{
	/// <summary>
	/// Pins objects in memory
	/// </summary>
	public class Pin
	{
		/*============================================================================*/
		/* Private Properties                                                         */
		/*============================================================================*/
		
		private Dictionary<object, bool>_instances = new Dictionary<object, bool>();
		
//		private IEventDispatcher _dispatcher;

		/*============================================================================*/
		/* Constructor                                                                */
		/*============================================================================*/

		public Pin(/*IEventDispatcher dispatcher*/)
		{
//			_dispatcher = dispatcher;
		}

		/*============================================================================*/
		/* Public Functions                                                           */
		/*============================================================================*/

		/// <summary>
		/// Pin an object in memory
		/// </summary>
		/// <param name="instance">Instance to pin</param>
		public void Detain(object instance)
		{
			if (!_instances[instance])
			{
				_instances[instance] = true;
//				_dispatcher.dispatchEvent(new PinEvent(PinEvent.DETAIN, instance));
			}
		}

		/// <summary>
		/// Unpins an object
		/// </summary>
		/// <param name="instance">Instance to unpin</param>
		public void Release(object instance)
		{
			if (_instances.ContainsKey(instance))
			{
				_instances.Remove(instance);
//				_dispatcher.dispatchEvent(new PinEvent(PinEvent.RELEASE, instance));
			}
		}

		/// <summary>
		/// Removes all pins
		/// </summary>
		public void ReleaseAll()
		{
			foreach (object instance in _instances.Keys)
			{
				Release(instance);
			}
		}
	}
}

